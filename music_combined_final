#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Created on Thu Apr 25 14:25:48 2019

@author: Crystal & Punit
"""

from synthesizer import Player, Synthesizer, Waveform
import csv


protein_sequence = 'MVHLTPEEKSAVTALWGKVNVDEVGGEALGRLLVVYPWTQRFFESFGDLSTPDAVMGNPKVKAHGKKVLGAFSDGLAHLDNLKGTFATLSELHCDKLHVDPENFRLLGNVLVCVLAHHFGKEFTPPVQAAYQKVVAGVANALAHKYH'

hydrophobic_aa = ['V','I','L','M','F','W','C','A']  # A - G major chords with sine wave
less_hydrophobic_aa = ['Y','H','T','S','P','G']  # A - G single notes with sine wave
  # A - G major chords with sawtooth wave
non_hydrophobic_aa = ['K','R','E','D','N','Q']  # A - G minor chords with sine wave

small = ['A','G','S','C','P','T','V']
medium = ['N','D','E','Q','O','I','L','K','M','U']
large = ['R','W','Y','H','F']

nonpolar = ['F','W','I','L','M','V','C','A','P','G']
polar = ['Y','T','S','H','K','R','E','D','Q','N']

with open('./note_frequency.csv', mode='r') as file:
    reader = csv.DictReader(file)
    notes = {r['note']: float(r['frequency']) for r in reader}


# A4 through D#6
note_range = list(notes.keys())[55:]
# print(note_range)
less_hydrophobic_notes = ['A4', 'B4', 'C5', 'D5', 'E5', 'F5']
#single_notes = ['A4', 'B4', 'C5', 'D5', 'E5', 'F5']

G4 = ['G4','B4','D5']
A4 = ['A4', 'C#5', 'E5']
B4 = ['B4', 'D#5', 'F#5']
C5 = ['C5', 'E5', 'G5']
D5 = ['D5', 'F#5', 'A5']
E5 = ['E5', 'G#5', 'B5']
F5 = ['F5', 'A5', 'C6']
G5 = ['G5', 'B5', 'D6']
A5 = ['A5','C#6','E6']

major_chords = [G4, A4, B4, C5, D5, E5, F5, G5, A5]
non_hydrophobic_chords = [A4, B4, C5, D5, E5, F5]


association = {}


def get_sorted_aa(sequence, amino_acids):
    freq = {}
    for aa in amino_acids:
        freq[aa] = sequence.count(aa)
    # print(freq)
    return sorted(freq, key=lambda x: freq[x], reverse=True)

def get_size_polarity(aa):
    if aa in small and aa in nonpolar:
        return 'nonpolar',0.1
    if aa in small and aa in polar:
        return 'polar',0.1
    if aa in medium and aa in nonpolar:
        return 'nonpolar',0.2
    if aa in medium and aa in polar:
        return 'polar',0.2
    if aa in large and aa in nonpolar:
        return 'nonpolar',0.3
    if aa in large and aa in polar:
        return 'polar',0.3
    
        
        

def get_association(sequence, amino_acids, notes, instrument):
    sorted_aa = get_sorted_aa(sequence, amino_acids)
    assoc = {}
    for aa, note in zip(sorted_aa, notes):
        volume, length = get_size_polarity(aa)
        assoc[aa] = (note, instrument, volume, length)
        
    return assoc



def print_notes(note):
    note_string = ''
    for n in note_range:
        if n in note:
            note_string += n
        else:
            note_string += ' '
    print(note_string)


association.update(get_association(protein_sequence, hydrophobic_aa, major_chords,'square'))
association.update(get_association(protein_sequence, less_hydrophobic_aa, less_hydrophobic_notes,'sine'))
association.update(get_association(protein_sequence, non_hydrophobic_aa, non_hydrophobic_chords,'sawtooth'))

# print(association)

player = Player()
player.open_stream()
synthesizer = {
    'polar':{
            'sine': Synthesizer(osc1_waveform=Waveform.sine, osc1_volume=1.0, use_osc2=False),
            'sawtooth': Synthesizer(osc1_waveform=Waveform.sawtooth, osc1_volume=1.0, use_osc2=False),
            'square': Synthesizer(osc1_waveform=Waveform.sawtooth, osc1_volume=1.0, use_osc2=False)
            },
    'nonpolar':{
            'sine': Synthesizer(osc1_waveform=Waveform.sine, osc1_volume=0.5, use_osc2=False),
            'sawtooth': Synthesizer(osc1_waveform=Waveform.sawtooth, osc1_volume=0.5, use_osc2=False),
            'square': Synthesizer(osc1_waveform=Waveform.sawtooth, osc1_volume=0.5, use_osc2=False)
            },
}

for idx, aa in enumerate(protein_sequence):
    note, instrument, volume, length = association[aa]

    length = length if idx != len(protein_sequence) - 1 else 1

    if type(note) == list:
        sound = synthesizer[volume][instrument].generate_chord([notes[n] for n in note], length)
        print_notes(note)
    else:
        sound = synthesizer[volume][instrument].generate_constant_wave(notes[note], length)
        print_notes([note])

    player.play_wave(sound)